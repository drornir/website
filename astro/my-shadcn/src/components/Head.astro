---
import { SITE_DESCRIPTION, SITE_TITLE } from "@/consts"
import "@/styles/global.css"
import type { CollectionEntry } from "astro:content"

type Blog = CollectionEntry<"blog">["data"]

export interface Props {
  title?: string
  description?: string
  cover?: {
    image: URL
    alt?: string
  }
  blog?: Blog
}

const profilePicURL = new URL("/me.jpg", Astro.url)

const canonicalURL = new URL(Astro.url.pathname, Astro.site)

let title = SITE_TITLE + (Astro.props.title ? " | " + Astro.props.title : "")
let description = Astro.props.description ?? SITE_DESCRIPTION
let cover = Astro.props.cover ?? { image: profilePicURL, alt: "My Profile Picture" }
let article: {
  publishDate?: Date
  updatedDate?: Date
  author?: string
} = {}

if (Astro.props.blog) {
  const b = Astro.props.blog

  title = SITE_TITLE + " | " + b.title
  description = b.description + ".\n" + b.tags.map((t) => "#" + t).join(" ")
  cover = {
    ...b.cover,
    image: new URL(b.cover.image, Astro.url),
  }

  article.author = "Dror Nir"
  article.publishDate = b.date
  article.updatedDate = b.updatedDate
}
---

<head>
  <!-- Global Metadata -->
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <link rel="icon" href="/favicon.ico" />
  <meta name="generator" content={Astro.generator} />
  <link rel="sitemap" href="/sitemap-index.xml" />

  <!-- Font preloads -->
  <link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin />
  <link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin />
  <link rel="preload" href="/fonts/PTSerif-Regular.ttf" as="font" type="font/ttf" crossorigin />
  <link rel="preload" href="/fonts/PTSerif-Bold.ttf" as="font" type="font/ttf" crossorigin />
  <link rel="preload" href="/fonts/PTSerif-Italic.ttf" as="font" type="font/ttf" crossorigin />
  <link rel="preload" href="/fonts/PTSerif-BoldItalic.ttf" as="font" type="font/ttf" crossorigin />

  <!-- Canonical URL -->
  <link rel="canonical" href={canonicalURL} />

  <!-- Primary Meta Tags -->
  <title>{title}</title>
  <meta name="title" content={title} />
  <meta name="description" content={description} />

  <!-- Open Graph / Facebook -->
  <meta property="og:type" content="website" />
  <meta property="og:url" content={Astro.url} />
  <meta property="og:title" content={title} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={cover.image} />
  {cover.alt ? <meta property="og:image:alt" content={cover.alt} /> : null}
  {article.author ? <meta property="article:author" content={article.author} /> : null}
  {article.publishDate ? <meta property="article:published_time" content={article.publishDate.toISOString()} /> : null}
  {article.updatedDate ? <meta property="article:modified_time" content={article.updatedDate.toISOString()} /> : null}

  <!-- Twitter -->
  <meta property="twitter:card" content="summary" />
  <meta property="twitter:site" content="@drornir" />
  <meta property="twitter:creator" content="@drornir" />

  <meta property="twitter:url" content={Astro.url} />
  <meta property="twitter:title" content={title} />
  <meta property="twitter:description" content={description} />
  <meta property="twitter:image" content={cover.image} />
  {cover.alt ? <meta property="twitter:image:alt" content={cover.alt} /> : null}

  <script is:inline>
    const getThemePreference = () => {
      if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
        return localStorage.getItem("theme")
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light"
    }
    const isDark = getThemePreference() === "dark"
    document.documentElement.classList[isDark ? "add" : "remove"]("dark")

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark")
        localStorage.setItem("theme", isDark ? "dark" : "light")
      })
      observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] })
    }
  </script>
</head>
